%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <ctype.h>
	
	#include "treenode.h"
	#include "global.h"
	#include "29.tab.hpp"
	
	extern void yyerror(char const *s);
	extern int yylex(void);
	extern int yyparse();
	int power(int base, int exp);
	void printtree(TreeNode* p);
	void printtree1(TreeNode* p, int level);
	

%}



%token DONE ID NUM WHILE IF ELSE PRINT READ

%right '='
%right ':'
%right '?'
%left '|'
%left '&'
%nonassoc '<' '>'
%left '+' '-'
%left '*' '/' '%'
%left '^'

%union {
	TreeNode* p;
	int	i;
}

%type <p> expr term list
%type <i> ID NUM


%%


list : /* empty */
			| list expr ';'		{ $$ = mknode('~',$1); printtree($2); }


expr : expr '+' term    { $$ = mknode('+', $1, $3); }
     | expr '-' term    { $$ = mknode('-', $1, $3); }
		 | term							{ $$ = $1;	}

     | expr '*' term    { $$ = mknode('*', $1, $3); }
     | expr '/' term		{ $$ = mknode('/', $1, $3); }
     | expr '^' term		{ $$ = mknode('^', $1, $3); }
     | expr '%' term		{	$$ = mknode('%', $1, $3);	}
     | expr '|' term		{ $$ = mknode('|', $1, $3);	}
     | expr '<' term		{ $$ = mknode('<', $1, $3);	}
     | expr '>' term		{ $$ = mknode('>', $1, $3);	}
     | expr '&' term		{ $$ = mknode('&', $1, $3);	}
     | term '=' expr		{	$$ = mknode('=', $1, $3); }
     | ';'							{ $$ = mknode(';');			}
		 

term : '(' expr ')'			{ $$ = $2; }
		 |	ID							{	$$ = mkleaf(ID, $1); }
		 |	NUM							{	$$ = mkleaf(NUM, $1);}
		 
		 ;
	  
%%

int power(int base, int exp)
{
  		if (exp == 0)
    		return 1;


  		int i, result = 1;
  		for (i = 0; i < exp; i++)	
    		result *= base;
  		return result;

}

void printtree1(TreeNode* p, int level) {
  if (p == 0)
    ;
  else if (p->type == ID) {
    printf("%*s", 2*level, "");
    printf("%s\n", symtable[p->leaf_value].lexptr);
  }
  else if (p->type == NUM) {
    printf("%*s", 2*level, "");
    printf("%d\n", p->leaf_value);
  }
  else if (p->type == '+') {
    printf("%*s", 2*level, "");
    printf("+\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }

  else if (p->type == '-') {
    printf("%*s", 2*level, "");
    printf("-\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  
  }  
  else if (p->type == '*') {
    printf("%*s", 2*level, "");
    printf("*\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  
  }
  else if (p->type == '/') {
    printf("%*s", 2*level, "");
    printf("/\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  
  }
  else if (p->type == '%') {
    printf("%*s", 2*level, "");
    printf("%\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  
  }
  else if (p->type == '<') {
    printf("%*s", 2*level, "");
    printf("<\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  
  }
  else if (p->type == '>') {
    printf("%*s", 2*level, "");
    printf(">\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  
  }
  else if (p->type == '&') {
    printf("%*s", 2*level, "");
    printf("&\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  
  }
  else if (p->type == '|') {
    printf("%*s", 2*level, "");
    printf("|\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  
  }
  else if (p->type == '=') {
    printf("%*s", 2*level, "");
    printf("=\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  
  }       
  else if (p->type == ';') {
    printf("%*s", 2*level, "");
    printtree1(p->args[0], level + 1);
    printf("%*s", 2*level, "");
    printf(";\n");
    printtree1(p->args[1], level);
  }
}

void printtree(TreeNode* p) {
  printf("Syntax tree:\n");
  printtree1(p, 0);
}



void yyerror(char const *s) {
		fprintf(stderr, "%s\n", s);
}			

int yylex(void) {
	return lexan();
}


void parse() {
	yyparse();
}


int main() {
	printf("%d\n", yyparse());
	return 0;
}

